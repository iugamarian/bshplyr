#!/bin/bash

# Song destroyer mode - deletes song when next button pressed

#PLAYERBIN="/usr/bin/omxplayer"
PLAYERBIN="/usr/bin/omxplayer.bin"
PLAYLIST_SAVED_FILE="/root/saved"
SONGFILE=""	# path to the song to be played
START_PLAYER="1"
DETECT_PLAYER="0"
#PATH_MOD="/500gbdate/pi/celtic-dance-by-riverdance-mp3/"
PATH_MOD="/root/music/"
PLAYLIST="/tmp/playlist" # /tmp on Arch is not always a tmpfs so do few writes
PLAYLIST_RECENT_LINE=$[$(cat "$PLAYLIST_SAVED_FILE")]
PLAYLIST_LASTLINE="0"
DELETE_BUTTON_ADRESS="0"
DELETE_BUTTON_RELEASED="1"
NEXT_BUTTON_ADRESS="1"
NEXT_BUTTON_RELEASED="1"


# Using gpio command installed when installing WiringPi library, linking it
gpio mode $DELETE_BUTTON_ADRESS in
gpio mode $NEXT_BUTTON_ADRESS in

generate_playlist ()

{

# /tmp on Arch is not always a tmpfs so do few writes (call this rarely)
rm "$PLAYLIST"
find "$PATH_MOD" -iname "*.wav" -exec echo {} >> "$PLAYLIST" \;
find "$PATH_MOD" -iname "*.flac" -exec echo {} >> "$PLAYLIST" \;
find "$PATH_MOD" -iname "*.mp3" -exec echo {} >> "$PLAYLIST" \;
find "$PATH_MOD" -iname "*.ogg" -exec echo {} >> "$PLAYLIST" \;
find "$PATH_MOD" -iname "*.mp4" -exec echo {} >> "$PLAYLIST" \;
#ls -1 "$PATH_MOD" > "$PLAYLIST"
# Detect if music has been found, if not exit
if [ -f "$PLAYLIST" ]
then
	PLAYLIST_LASTLINE=`cat "$PLAYLIST" | wc -l`
        espeak -a 600 -p 0 "Found $PLAYLIST_LASTLINE songs."
else
        espeak -a 600 -p 0 "No songs found, exiting! No songs found, exiting!"
        exit
fi
# Avoid a saved song number larger than the number of songs
if [ "$PLAYLIST_RECENT_LINE" -gt  "$PLAYLIST_LASTLINE" ]
then
PLAYLIST_RECENT_LINE="1"
fi

espeak -a 600 -p 0 "Current song is $PLAYLIST_RECENT_LINE."

}


test_player ()

{

	ps -ef | grep -v grep | grep -q "omxplayer.bin"
	if [ $? -ne 0 ]
	then
	DETECT_PLAYER="0"
	else
	DETECT_PLAYER="1" 
	fi

}


next_song ()

{

	if [ "$PLAYLIST_RECENT_LINE" -eq  "$PLAYLIST_LASTLINE" ]
	then
	PLAYLIST_RECENT_LINE="1"
	else
	PLAYLIST_RECENT_LINE=$((PLAYLIST_RECENT_LINE+1))
	fi
	# Will write changes to disk just before starting the player
	START_PLAYER="1"
	# Save playlist position
	echo "$PLAYLIST_RECENT_LINE" > "$PLAYLIST_SAVED_FILE"

}


delete_song ()

{

	espeak -a 600 -p 0 "The song is being deleted."
	/usr/bin/sleep 0.1
	rm "$SONGFILE"
	# Decrease song number by one so that next_song will use the same song number
	if [ "$PLAYLIST_RECENT_LINE" -eq  "1" ]
	then
	PLAYLIST_RECENT_LINE="$PLAYLIST_LASTLINE"
	else
	PLAYLIST_RECENT_LINE=$((PLAYLIST_RECENT_LINE-1))
	fi

}


#### [ BOOTING ] ####

/usr/bin/sleep 7

#### [ BATTERY ] ####

#echo 0x0 > /sys/devices/platform/bcm2708_usb/buspower

#### [ PLAYLIST ] ####

# This will also be called after a song delete
generate_playlist


#### [ SYNC DATA TO PROTECT AGAINST CORRUPTION FROM POWER LOSS ] ####

# This is saving all changes done to disk by the systemd boot process
sync

#### [ CONTROL LOOP THAT REPEATS INFINETLY ] ####

while true
do

## [ START THE PLAYER ] ##

	if [ $START_PLAYER -eq "1" ]
	then
	# Determine the song by wanted line in the playlist (path and filename)
	SONGFILE=`cat "$PLAYLIST" | sed -n "$PLAYLIST_RECENT_LINE"p`
	# Write all changes to disk (before starting the player)
	/usr/bin/sleep 0.2
	sync
	/usr/bin/sleep 0.2
	# Starting the player, when " &" at the end, the script continues without waiting to finish
	"$PLAYERBIN" "$SONGFILE" &
	fi

## [ DETECT DELETE BUTTON RELEASED ---->>>> ALLOW A NEW DELETE BUTTON TO BE PRESSED ] ##

	if [ `gpio read $DELETE_BUTTON_ADRESS` = 1 ]
	then
	# Wait for the GPIO driver to rest
	/usr/bin/sleep 0.1
	# Test again to make sure it is not noise
		if [ `gpio read $DELETE_BUTTON_ADRESS` = 1 ]
		then
		# Wait for the GPIO driver to rest
		/usr/bin/sleep 0.1
		DELETE_BUTTON_RELEASED="1"
		fi
	fi

## [ DETECT DELETE BUTTON WAS RELEASED AND IS PRESSED ---->>>  STOP PLAYER  ---->>>>  DELETE THE UNWANTED SONG ] ##

	if [ $DELETE_BUTTON_RELEASED -eq "1" ] && [ `gpio read $DELETE_BUTTON_ADRESS` = 0 ]
	then
	# Wait for the GPIO driver to rest
	/usr/bin/sleep 0.1
	# Test again to make sure it is not noise (already checked released)
		if [ `gpio read $DELETE_BUTTON_ADRESS` = 0 ]
		then
		# Wait for the GPIO driver to rest
		/usr/bin/sleep 0.1
		# Killing the player like a song ending will allow a next song
		killall $PLAYERBIN
		# Deleting song after the player is not playing it
		# Wait for the file system to be released after the player has been killed
		/usr/bin/sleep 0.1
		delete_song
		# Wait for the file system to acknowledge the deletion
		/usr/bin/sleep 0.1
		# Generating playlist again after the song is deleted
		generate_playlist
		# Don't allow a new delete button press until released
		DELETE_BUTTON_RELEASED="0"
		fi
	fi

## [ DETECT NEXT BUTTON RELEASED ---->>>> ALLOW A NEW NEXT BUTTON TO BE PRESSED ] ##

	if [ `gpio read $NEXT_BUTTON_ADRESS` = 1 ]
	then
	# Wait for the GPIO driver to rest
	/usr/bin/sleep 0.1
	# Test again to make sure it is not noise
		if [ `gpio read $NEXT_BUTTON_ADRESS` = 1 ]
		then
		# Wait for the GPIO driver to rest
		/usr/bin/sleep 0.1
		NEXT_BUTTON_RELEASED="1"
		fi
	fi

## [ DETECT NEXT BUTTON WAS RELEASED AND IS PRESSED ---->>>  STOP PLAYER  ---->>>>  DELETE THE UNWANTED SONG ] ##

	if [ $NEXT_BUTTON_RELEASED -eq "1" ] && [ `gpio read $NEXT_BUTTON_ADRESS` = 0 ]
	then
	# Wait for the GPIO driver to rest
	/usr/bin/sleep 0.1
	# Test again to make sure it is not noise (already checked released)
		if [ `gpio read $NEXT_BUTTON_ADRESS` = 0 ]
		then
		# Wait for the GPIO driver to rest
		/usr/bin/sleep 0.1
		# Killing the player like a song ending will allow a next song
		killall $PLAYERBIN
		# Wait for the file system to be released after the player has been killed
		/usr/bin/sleep 0.1
		espeak -a 600 -p 0 "Going to the next song."
		/usr/bin/sleep 0.1
		# Don't allow a new next button press until released
		NEXT_BUTTON_RELEASED="0"
		fi
	fi

## [ DETECT PLAYER STOPPED (song end/next or killed by delete) ---->>>>  NEXT SONG ] ##

	test_player
	if [ $DETECT_PLAYER -eq "0" ]
	then
	next_song
	else
	START_PLAYER="0"
	fi

## [ GO SLOWER THROUGH THE INFINITE LOOP IF NO CHANGES ] ##

	# But be fast enough to sense the button and player responsively
	/usr/bin/sleep 0.1

done
